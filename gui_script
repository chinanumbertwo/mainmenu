import tkinter as tk
from tkinter import ttk
import subprocess

class ScriptControlApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Script Control App")
        self.root.geometry("1024x768")

        self.main_process = None

        self.tab_control = ttk.Notebook(self.root)

        # Home Tab
        self.home_tab = ttk.Frame(self.tab_control)
        self.toggle_button = tk.Button(self.home_tab, text="Start Main Script", command=self.toggle_main_script, height=2, width=15)
        self.toggle_button.pack(pady=20)
        self.start_instructions_label = tk.Label(self.home_tab, text="Press Ctrl+F2 to start the main script.", wraplength=300, font=("Arial", 12))
        self.start_instructions_label.pack()
        self.stop_instructions_label = tk.Label(self.home_tab, text="Press Ctrl+F3 to stop the main script.", wraplength=300, font=("Arial", 12))
        self.stop_instructions_label.pack_forget()
        self.tab_control.add(self.home_tab, text="Home")

        # Instruction Manual Tab
        self.instruction_tab = ttk.Frame(self.tab_control)
        instruction_text = """Instructions:
        - bingbongchingching
                            """
        instruction_text_widget = tk.Text(self.instruction_tab, wrap=tk.WORD, font=("Arial", 12), height=10, width=40)
        instruction_text_widget.insert(tk.END, instruction_text)
        instruction_text_widget.config(state=tk.DISABLED)
        instruction_text_widget.pack(padx=20, pady=20)
        self.tab_control.add(self.instruction_tab, text="Instruction Manual")

        # Settings Tab
        self.settings_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.settings_tab, text="Settings")

        self.create_settings_menu()
        self.create_password_section()

        self.tab_control.pack(fill="both", expand=True)

        self.tab_control.bind("<<NotebookTabChanged>>", self.on_tab_change)

        self.start_keybind = "<Control-F2>"
        self.stop_keybind = "<Control-F3>"

        self.default_start_keybind = self.start_keybind
        self.default_stop_keybind = self.stop_keybind

        self.root.bind(self.start_keybind, self.start_main_script)
        self.root.bind(self.stop_keybind, self.stop_main_script)

        self.keybind_settings()

        self.password = None
        self.password_entry = None
        self.password_protected = False

        # Define predefined themes
        self.predefined_themes()

        print("GUI initialized.")

    def keybind_settings(self):
        keybind_frame = ttk.LabelFrame(self.settings_tab, text="Custom Keybinds")
        keybind_frame.pack(padx=20, pady=10, fill="both", expand=False)

        start_keybind_label = tk.Label(keybind_frame, text="Start Main Script Keybinds:", font=("Arial", 12))
        start_keybind_label.pack(pady=5)

        self.start_keybind_listbox = tk.Listbox(keybind_frame, font=("Arial", 12), selectmode=tk.MULTIPLE, height=3)
        self.start_keybind_listbox.pack(pady=5)
        self.start_keybind_listbox.insert(tk.END, self.start_keybind)
        self.start_keybind_listbox.bind("<FocusIn>", lambda event: self.listen_for_keybind(event, self.start_keybind_listbox))

        reset_start_keybind_button = tk.Button(keybind_frame, text="Reset Start Keybinds", command=self.reset_start_keybind)
        reset_start_keybind_button.pack(pady=5)

        stop_keybind_label = tk.Label(keybind_frame, text="Stop Main Script Keybinds:", font=("Arial", 12))
        stop_keybind_label.pack(pady=5)

        self.stop_keybind_listbox = tk.Listbox(keybind_frame, font=("Arial", 12), selectmode=tk.MULTIPLE, height=3)
        self.stop_keybind_listbox.pack(pady=5)
        self.stop_keybind_listbox.insert(tk.END, self.stop_keybind)
        self.stop_keybind_listbox.bind("<FocusIn>", lambda event: self.listen_for_keybind(event, self.stop_keybind_listbox))

        reset_stop_keybind_button = tk.Button(keybind_frame, text="Reset Stop Keybinds", command=self.reset_stop_keybind)
        reset_stop_keybind_button.pack(pady=5)

    def reset_start_keybind(self):
        self.root.unbind("<" + self.start_keybind + ">")
        self.start_keybind_listbox.delete(0, tk.END)
        for key in self.default_start_keybind.split("+"):
            self.start_keybind_listbox.insert(tk.END, key)
        self.start_keybind = self.default_start_keybind
        self.change_start_keybind()  # Rebind the keybind

    def reset_stop_keybind(self):
        self.root.unbind("<" + self.stop_keybind + ">")
        self.stop_keybind_listbox.delete(0, tk.END)
        for key in self.default_stop_keybind.split("+"):
            self.stop_keybind_listbox.insert(tk.END, key)
        self.stop_keybind = self.default_stop_keybind
        self.change_stop_keybind()  # Rebind the keybind


    def change_start_keybind(self):
        new_keybinds = [self.start_keybind_listbox.get(idx) for idx in self.start_keybind_listbox.curselection()]
        new_keybind = "<" + "+".join(new_keybinds) + ">"

        self.root.unbind(self.start_keybind)
        self.start_keybind = new_keybind

        if self.start_keybind:
            self.root.bind(self.start_keybind, self.start_main_script)

    def change_stop_keybind(self):
        new_keybinds = [self.stop_keybind_listbox.get(idx) for idx in self.stop_keybind_listbox.curselection()]
        new_keybind = "<" + "+".join(new_keybinds) + ">"

        self.root.unbind(self.stop_keybind)
        self.stop_keybind = new_keybind

        if self.stop_keybind:
            self.root.bind(self.stop_keybind, self.stop_main_script)


    def predefined_themes(self):
        self.default_theme = ttk.Style()
        self.default_theme.configure("TButton", background="#00CC00", foreground="#ffffff")
        self.default_theme.configure("TLabel", foreground="#222831")

    def create_settings_menu(self):
        settings_label = tk.Label(self.settings_tab, text="Settings", font=("Arial", 14, "bold"))
        settings_label.pack(pady=20)

        theme_frame = ttk.LabelFrame(self.settings_tab, text="Theme")
        theme_frame.pack(padx=20, pady=20, fill="both", expand=True)

        themes = ["default", "clam", "alt", "classic"]
        self.theme_var = tk.StringVar(value=themes[0])
        theme_option_menu = tk.OptionMenu(theme_frame, self.theme_var, *themes, command=self.apply_theme)
        theme_option_menu.config(font=("Arial", 12))
        theme_option_menu.pack(pady=10)

        tk.Label(theme_frame, text="", font=("Arial", 6)).pack()

    def apply_theme(self, theme):
        self.default_theme.theme_use(theme)

    def toggle_main_script(self):
        if self.main_process is None:
            self.start_main_script()
        else:
            self.stop_main_script()

    def start_main_script(self, event=None):
        if self.main_process is None:
            self.main_process = subprocess.Popen(["python", "main_script.py"])
            self.toggle_button.config(text="Stop Main Script", bg="#FF5555", fg="#ffffff")
            self.start_instructions_label.pack_forget()
            self.stop_instructions_label.pack()

    def stop_main_script(self, event=None):
        if self.main_process is not None:
            self.main_process.terminate()
            self.main_process = None
            self.toggle_button.config(text="Start Main Script", bg="#00CC00", fg="#ffffff")
            self.start_instructions_label.pack()
            self.stop_instructions_label.pack_forget()

    def on_tab_change(self, event):
        self.start_instructions_label.pack()
        self.stop_instructions_label.pack_forget()
        self.check_password()

    def listen_for_keybind(self, event, entry_widget):
        entry_widget.delete(0, tk.END)
        entry_widget.bind("<KeyPress>", lambda e: self.update_keybind_entry(e, entry_widget))

    def update_keybind_entry(self, event, entry_widget):
        key_combination = event.keysym
        if event.state & (1 << 2):  # Shift key
            key_combination = "Shift+" + key_combination
        if event.state & (1 << 3):  # Caps Lock key
            key_combination = "CapsLock+" + key_combination
        if event.state & (1 << 0):  # Control key
            key_combination = "Ctrl+" + key_combination
        if event.state & (1 << 1):  # Alt key
            key_combination = "Alt+" + key_combination

        entry_widget.delete(0, tk.END)
        entry_widget.insert(tk.END, key_combination)
        entry_widget.unbind("<KeyPress>")
        entry_widget.unbind("<FocusIn>")

    def create_password_section(self):
        password_frame = ttk.LabelFrame(self.settings_tab, text="Password Setup")
        password_frame.pack(padx=20, pady=10, fill="both", expand=True)

        password_label = tk.Label(password_frame, text="Enter Password:", font=("Arial", 12))
        password_label.pack(pady=5)

        self.password_entry = tk.Entry(password_frame, font=("Arial", 12), show="*")
        self.password_entry.pack(pady=5)

        set_password_button = tk.Button(password_frame, text="Set Password", command=self.set_password)
        set_password_button.pack(pady=5)

        remove_password_button = tk.Button(password_frame, text="Remove Password", command=self.remove_password)
        remove_password_button.pack(pady=5)

    def set_password(self):
        self.password = self.password_entry.get()
        self.password_protected = True
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, "Password Set")
        self.password_entry.config(state='disabled')  # Disable the password entry
        self.tab_control.tab(2, state='disabled')  # Disable the settings tab


    def remove_password(self):
        self.password = None
        self.password_protected = False
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, "")
        self.tab_control.tab(2, state='normal')   # Enable the settings tab

    def check_password(self):
        if self.password_protected:
            self.password_entry.delete(0, tk.END)
            self.password_entry.insert(0, "Enter Password")
            self.tab_control.tab(2, state='disabled')  # Disable the settings tab
        else:
            self.tab_control.tab(2, state='normal')   # Enable the settings tab


if __name__ == "__main__":
    root = tk.Tk()
    app = ScriptControlApp(root)
    root.mainloop()


